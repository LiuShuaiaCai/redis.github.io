{"./":{"url":"./","title":"REDIS列表","keywords":"","body":"Introduction Copyright © Lsc 22022 all right reserved，powered by Gitbook修订时间： 2021-11-22 11:22:06 "},"redis/robj/":{"url":"redis/robj/","title":"Robj","keywords":"","body":"robj对象 Redis是一个key-value型数据库，key只能是字符串，value可以是字符串、列表、集合、有序集合和哈希，这5种数据类型用结构体robj表示，我们称之为Redis对象。 robj数据结构 typedef struct redisObject { unsigned type:4; // 对象类型（4位=0.5字节） unsigned encoding:4; // 编码（4位=0.5字节） unsigned lru:LRU_BITS; // 记录对象最后一次被应用程序访问的时间（24位=3字节）,LRU时间（相对于全局LRU_clock）或LFU数据（最低有效8位频率和最高有效16位访问时间）。 int refcount; // 引用计数。等于0时表示可以被垃圾回收（4字节） void *ptr; // 数据指针。指向真正的数据(8字节)。比如，一个代表string的robj，它的ptr可能指向一个sds结构；一个代表list的robj，它的ptr可能指向一个quicklist } robj; 对象类型 特点 元素类型相同 长度固定，不可以追加元素 长度、类型不同的变量不能比较 数组初始化 a)指定长度 a := [2]int{1, 2} b)不指定长度 不指定长度时，其长度是由后面初始化列表数量来确定。 a := [...]int{1,2} c)定义多维数组 a := [2][8]int{{6, 8}} // [[6 8 0 0 0 0 0 0] [0 0 0 0 0 0 0 0]] 数组遍历 package main import \"fmt\" func main() { a := [...]string{\"liu\", \"shuai\", \"cai\"} // 方法一 for i := 0; i 为多种数据类型提供一种统一的表示方式。 允许同一类型的数据采用不同的内部表示，从而在某些情况下尽量节省内存。 支持对象共享和引用计数。当对象被共享的时候，只占用一份内存拷贝，进而节省内存。 Copyright © Lsc 22022 all right reserved，powered by Gitbook修订时间： 2021-12-05 15:51:31 "}}